int[][] board = new int[9][9]; // The Sudoku board
int selectedRow = -1;
int selectedCol = -1;
boolean selected = false;
boolean[][] editable = new boolean[9][9]; 
boolean victory = false;


void setup() {
  size(540, 540);
  background(255);
  generateSudoku();
  printBoard();
}


void draw() {
  background(255);
  draw_grid(3, width);
  Selection();
  DrawNumbers();
  if (victory) {
    displayVictoryScreen(); 
  }
}  



void Selection(){
if (selected){
    stroke(0,0,255);
    strokeWeight(2);
    fill(230);
    rect((width/9)*selectedCol,(height/9)*selectedRow,(width/9),(height/9));
  }
}


void draw_grid(int a, int size) {
  stroke(0);
  for (int i = 1; i < a * 3; i++) {
    strokeWeight(1);
    line(size / a * i / 3, 0, size / a * i / 3, size);
    line(0, size / a * i / 3, size, size / a * i / 3);
  }
  for (int j = 1; j < a; j++) {
    strokeWeight(4);
    line(size / a * j, 0, size / a * j, size);
    line(0, size / a * j, size, size / a * j);
  }
}


void DrawNumbers() {
  textSize(32);
  for (int i = 0; i < 9; i++) {
    for (int j = 0; j < 9; j++) {
      if (board[i][j] != 0) {
        fill(0);
        textAlign(CENTER, CENTER);
        text(board[i][j], j * height / 9 + height / 18, i * height / 9 + height / 18);
      }
    }
  }
}


void generateSudoku() {
  fillBoard();
  removeNumbers();
}


boolean fillBoard() {
  for (int row = 0; row < 9; row++) {
    for (int col = 0; col < 9; col++) {
      if (board[row][col] == 0) {
        for (int num = 1; num <= 9; num++) {
          if (isValid(row, col, num)) {
            board[row][col] = num;
            if (fillBoard()) {
              return true;
            }
            board[row][col] = 0; 
          }
        }
        return false; 
      }
    }
  }
  return true; 
}


boolean isValid(int row, int col, int num) {
  boolean rowCheck = CheckRow(board, num, row, col);
  boolean colCheck = CheckCol(board, num, col, row);
  boolean blockCheck = CheckBlock(board, num, row, col);
  return rowCheck && colCheck && blockCheck;
}


boolean CheckRow(int[][] puzzle, int num, int row, int col) {
  for (int i = 0; i < 9; i++) {
    if (puzzle[row][i] == num) {
      if (i != col){ 
      return false;
      }
    }
  }
  return true; 
}

boolean CheckCol(int[][] puzzle, int num, int col, int row) {
  for (int i = 0; i < 9; i++) {
    if (puzzle[i][col] == num) {
      if (i != row){ 
      return false;
      }
    }
  }
  return true; 
}

boolean CheckBlock(int[][] puzzle, int num, int row, int col) {
  int startRow = (row / 3) * 3;
  int startCol = (col / 3) * 3;
  for (int i = startRow; i < startRow + 3; i++) {
    for (int j = startCol; j < startCol + 3; j++) {
      if (puzzle[i][j] == num) {
        if (i != row && j != col){
        return false; 
        }
      }
    }
  }
  return true; 
}


void removeNumbers() {
  int count = 2; 
  while (count != 0) {
    int i = (int) random(9);
    int j = (int) random(9);
    if (board[i][j] != 0) {
      int temp = board[i][j];
      board[i][j] = 0;
      if (!isSolvable()) {
        board[i][j] = temp; 
      } 
      else {
        editable[i][j] = true; 
        count--;
      }
    }
  }
}


boolean isSolvable() {
  int[][] copy = new int[9][9];   // Create a copy of the board to solve
  for (int i = 0; i < 9; i++) {
    System.arraycopy(board[i], 0, copy[i], 0, 9);
  }
  return fillBoard(copy);
}


boolean fillBoard(int[][] puzzle) {  // Copy solver
  for (int row = 0; row < 9; row++) {
    for (int col = 0; col < 9; col++) {
      if (puzzle[row][col] == 0) {
        for (int num = 1; num <= 9; num++) {
          if (isValid(row, col, num, puzzle)) {
            puzzle[row][col] = num;
            if (fillBoard(puzzle)) {
              return true;
            }
            puzzle[row][col] = 0; 
          }
        }
        return false;
      }
    }
  }
  return true;
}

boolean isValid(int row, int col, int num, int[][] puzzle) {
  return CheckRow(puzzle, num, row, col) && CheckCol(puzzle, num, col, row) && CheckBlock(puzzle, num, row, col);
}

void printBoard() {
  for (int i = 0; i < 9; i++) {
    for (int j = 0; j < 9; j++) {
      print(board[i][j], "");
    }
    print("\n");
  }
}


void mousePressed() {
  int col = mouseX/(height/9);
  int row = mouseY/(height/9);
  if (col >= 0 && col < 9 && row >= 0 && row < 9 && editable[row][col]) {
    selectedRow = row;
    selectedCol = col;
    selected = true;
  }
}


void keyPressed() {
  if (selectedRow != -1 && selectedCol != -1) {
    if (key >= '1' && key <= '9') {
      board[selectedRow][selectedCol] = Character.getNumericValue(key);
      checkVictory(); 
    } 
    else if (keyCode == BACKSPACE) {
      board[selectedRow][selectedCol] = 0;
    }
  }
}


void checkVictory() {
  for (int row = 0; row < 9; row++) {
    for (int col = 0; col < 9; col++) {
      if (board[row][col] == 0) {
        println("Cell empty at (" + row + ", " + col + ")");
        return;
      }
      if (!isValid(row, col, board[row][col])) {
        println("Invalid number at (" + row + ", " + col + ")");
        return;
      }
    }
  }
  victory = true; 
  println("Victory!");
}


void displayVictoryScreen() {
  fill(0, 150); 
  rect(0, 0, width, height); 

  fill(255); 
  textSize(48);
  textAlign(CENTER, CENTER);
  text("Congratulations!", width / 2, height / 3);
  textSize(32);
  text("You solved the Sudoku!", width / 2, height / 2);
}
