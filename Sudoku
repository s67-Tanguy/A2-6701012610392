int[][] board; // position in board
int selectedRow = -1;
int selectedCol = -1;
boolean selected = false;
boolean[][] editable;


void setup() {
  size(540, 540);
  background(255);
  
  board = RandomNumbers();
  for (int i = 0; i < 9; i++) {
    for (int j = 0; j < 9; j++) {
      print(board[i][j], "");
    }
    print("\n");
    
  editable = new boolean[9][9];
  int k = 0;
  while (k < 9){
    int l = 0;
    while (l < 9){
      editable[k][l] = (board[k][l] == 0);
      l++;
      }
    k++;
    }
  }
}    



void draw() {
  background(255);
  draw_grid(3, width);
  DrawNumbers();
  if (selected){
    stroke(0,0,255);
    strokeWeight(2);
    fill(230);
    rect((width/9)*selectedCol,(height/9)*selectedRow,(width/9),(height/9));
  }
}


void draw_grid(int a, int size) {
  stroke(0);
  for (int i = 1; i < a * 3; i++) {
    strokeWeight(1);
    line(size / a * i / 3, 0, size / a * i / 3, size);
    line(0, size / a * i / 3, size, size / a * i / 3);
  }  
  for (int j = 1; j < a; j++) {
    strokeWeight(4);
    line(size / a * j, 0, size / a * j, size);
    line(0, size / a * j, size, size / a * j);
  }
}


void DrawNumbers() {
  textSize(32);
  for (int i = 0; i < 9; i++) {
    for (int j = 0; j < 9; j++) {
      if (board[i][j] != 0) { // 0 is a blank
        fill(0);
        textAlign(CENTER, CENTER);
        text(board[i][j], j * height / 9 + height / 18, i * height / 9 + height / 18);
      }
    }
  }
}


int[][] RandomNumbers() {
  int[][] puzzle = new int[9][9];
  for (int i = 0; i < 9; i++) {
    for (int j = 0; j < 9; j++) {
      if (random(1) > 0.5) {
        int num;
        boolean placed = false;
        while (!placed) {
          num = (int) random(1, 10);
          if (CheckRow(puzzle, num, i) && CheckCol(puzzle, num, j) && CheckBlock(puzzle, num, i, j)) {
            puzzle[i][j] = num;
            placed = true;
          }
        }
      }
    }
  }
  return puzzle;
}


boolean CheckRow(int[][] puzzle, int a, int row) {
  for (int i = 0; i < 9; i++) {
    if (puzzle[row][i] == a) {
      return false; 
    }
  }
  return true; 
}


boolean CheckCol(int[][] puzzle, int a, int col) {
  for (int i = 0; i < 9; i++) {
    if (puzzle[i][col] == a) {
      return false; 
    }
  }
  return true; 
}


boolean CheckBlock(int[][] puzzle, int a, int row, int col) {
  int startRow = (row / 3) * 3;
  int startCol = (col / 3) * 3;
  for (int i = startRow; i < startRow + 3; i++) {
    for (int j = startCol; j < startCol + 3; j++) {
      if (puzzle[i][j] == a) {
        return false; 
      }
    }
  }
  return true; 
}


void mousePressed() {
  int col = mouseX/(height/9);
  int row = mouseY/(height/9);
  if (col >= 0 && col < 9 && row >= 0 && row < 9 && editable[row][col]) {
    selectedRow = row;
    selectedCol = col;
    selected = true;
  }
}
