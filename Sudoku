int[][] board; // position in board


void setup() {
  size(540, 540);
  background(255);
  board = RandomNumbers();
  for (int i = 0; i < 9; i++) {
    for (int j = 0; j < 9; j++) {
      print(board[i][j], " ");
    }
    print("\n");
  }
}


void draw() {
  background(255);
  draw_grid(3, width);
  DrawNumbers();
}


void draw_grid(int a, int size) {
  stroke(0);
  for (int i = 1; i < a * 3; i++) {
    strokeWeight(1);
    line(size / a * i / 3, 0, size / a * i / 3, size);
    line(0, size / a * i / 3, size, size / a * i / 3);
  }  
  for (int j = 1; j < a; j++) {
    strokeWeight(4);
    line(size / a * j, 0, size / a * j, size);
    line(0, size / a * j, size, size / a * j);
  }
}


void DrawNumbers() {
  textSize(32);
  for (int i = 0; i < 9; i++) {
    for (int j = 0; j < 9; j++) {
      if (board[i][j] != 0) { // 0 is a blank
        fill(0);
        textAlign(CENTER, CENTER);
        text(board[i][j], j * height / 9 + height / 18, i * height / 9 + height / 18);
      }
    }
  }
}


int[][] RandomNumbers() {
  int[][] puzzle = new int[9][9];
  for (int i = 0; i < 9; i++) {
    for (int j = 0; j < 9; j++) {
      if (random(1) > 0.5) {
        int num;
        boolean placed = false;
        while (!placed) {
          num = (int) random(1, 10);
          if (CheckRow(puzzle, num, i) && CheckCol(puzzle, num, j)) {
            puzzle[i][j] = num;
            placed = true;
          }
        }
      }
    }
  }
  return puzzle;
}


boolean CheckRow(int[][] puzzle, int a, int row) {
  for (int i = 0; i < 9; i++) {
    if (puzzle[row][i] == a) {
      return false; 
    }
  }
  return true; 
}


boolean CheckCol(int[][] puzzle, int a, int col) {
  for (int i = 0; i < 9; i++) {
    if (puzzle[i][col] == a) {
      return false; 
    }
  }
  return true; 
}
